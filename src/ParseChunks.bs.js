// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Gen$ReasonmlDemoIterators = require("./lib/gen/gen.bs.js");

var titleRegex = /^## (.*)$/;

function extractTitle(line) {
  var result = titleRegex.exec(line);
  if (result !== null) {
    return Caml_option.nullable_to_opt(Caml_array.get(result, 1));
  }
  
}

function appendLine(line, ch) {
  return {
          title: ch.title,
          body: {
            hd: line,
            tl: ch.body
          }
        };
}

function reverseLines(ch) {
  return {
          title: ch.title,
          body: List.rev(ch.body)
        };
}

function toOptChunk(ch) {
  if (List.length(ch.body) === 0) {
    return ;
  } else {
    return reverseLines(ch);
  }
}

function unfoldScanFunc(state, line) {
  var title = extractTitle(line);
  if (title !== undefined) {
    var nextState_body = {
      hd: line,
      tl: /* [] */0
    };
    var nextState = {
      title: title,
      body: nextState_body
    };
    var output = toOptChunk(state);
    return [
            nextState,
            output
          ];
  }
  var nextState$1 = appendLine(line, state);
  return [
          nextState$1,
          undefined
        ];
}

function linesToChunks(lines) {
  var sentinel = Gen$ReasonmlDemoIterators.singleton("## Will be discarded");
  var linesWithSentinel = Gen$ReasonmlDemoIterators.append(lines, sentinel);
  var genWithOpts = Gen$ReasonmlDemoIterators.unfold_scan(unfoldScanFunc, {
        title: "PREFIX",
        body: /* [] */0
      }, linesWithSentinel);
  return Gen$ReasonmlDemoIterators.filter_map((function (x) {
                return x;
              }), genWithOpts);
}

function linesToChunksImp(lines) {
  var lineOpt = Curry._1(lines, undefined);
  var init;
  if (lineOpt !== undefined) {
    var t = extractTitle(lineOpt);
    var title = t !== undefined ? t : "PREFIX";
    init = {
      title: title,
      body: {
        hd: lineOpt,
        tl: /* [] */0
      }
    };
  } else {
    init = undefined;
  }
  var curChunkOpt = {
    contents: init
  };
  return function (param) {
    var _param;
    while(true) {
      var curChunk = curChunkOpt.contents;
      if (curChunk === undefined) {
        return ;
      }
      var lineOpt = Curry._1(lines, undefined);
      if (lineOpt !== undefined) {
        var title = extractTitle(lineOpt);
        if (title !== undefined) {
          curChunkOpt.contents = {
            title: title,
            body: {
              hd: lineOpt,
              tl: /* [] */0
            }
          };
          return reverseLines(curChunk);
        }
        curChunkOpt.contents = appendLine(lineOpt, curChunk);
        _param = undefined;
        continue ;
      }
      curChunkOpt.contents = undefined;
      return reverseLines(curChunk);
    };
  };
}

exports.titleRegex = titleRegex;
exports.extractTitle = extractTitle;
exports.appendLine = appendLine;
exports.reverseLines = reverseLines;
exports.toOptChunk = toOptChunk;
exports.unfoldScanFunc = unfoldScanFunc;
exports.linesToChunks = linesToChunks;
exports.linesToChunksImp = linesToChunksImp;
/* Gen-ReasonmlDemoIterators Not a pure module */
