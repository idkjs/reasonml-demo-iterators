// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Task = require("tasks-ml/src/Task.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var React$ReactFrp = require("react-frp/src/react.bs.js");

function timeout(value) {
  return /* Task */{
          _0: (function (param, res) {
              var timer = setTimeout((function (param) {
                      return Curry._1(res, value);
                    }), value);
              return {
                      TAG: /* Cancel */0,
                      _0: (function (param) {
                          clearTimeout(timer);
                          
                        })
                    };
            })
        };
}

function notTimeout(value) {
  return /* Task */{
          _0: (function (param, res) {
              Curry._1(res, value);
              return /* NoCancel */0;
            })
        };
}

var p = Task.Operators.$great$great$pipe(Task.parallel(Pervasives.$at(List.map(timeout, {
                  hd: 1,
                  tl: {
                    hd: 2,
                    tl: {
                      hd: 3,
                      tl: {
                        hd: 4,
                        tl: {
                          hd: 5,
                          tl: {
                            hd: 6,
                            tl: {
                              hd: 7,
                              tl: {
                                hd: 8,
                                tl: {
                                  hd: 9,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }), $$Array.to_list($$Array.map(notTimeout, $$Array.mapi((function (index, param) {
                            return index + 10 | 0;
                          }), Caml_array.caml_make_vect(10000, 1)))))), (function (param) {
        return List.fold_left((function (a, b) {
                      return a + b | 0;
                    }), 0, param);
      }));

function makeTask(i) {
  if (i >= 100000) {
    return Task.pure({
                TAG: /* Done */1,
                _0: i + 1 | 0
              });
  } else if (i < 0) {
    return Task.reject("i must be positive");
  } else {
    return Task.pure({
                TAG: /* Next */0,
                _0: i + 1 | 0
              });
  }
}

var t = Task.Operators.$great$great$great(Task.Operators.$great$great$eq$bang(Task.Operators.$great$great$eq(Task.Operators.$great$great$pipe$bang(Task.Operators.$great$great$eq(Task.Operators.$great$great$pipe(Task.Operators.$great$great$eq(p, (function (param) {
                                return Task.chainRec(makeTask, param);
                              })), (function (m) {
                            return m + 10 | 0;
                          })), (function (m) {
                        return Task.pure(m + 100 | 0);
                      })), (function (param) {
                    return 100;
                  })), Task.reject), (function (m) {
            return Task.pure(m + 100 | 0);
          })), (function (v) {
        console.log(v._0);
        
      }));

var counter = {
  contents: 0
};

var match = React$ReactFrp.S.create(undefined, counter.contents);

var timeF = match[1];

var timeS = match[0];

function timeIncrement(param) {
  counter.contents = counter.contents + 1 | 0;
  return Curry._2(timeF, undefined, counter.contents);
}

var timerId = setInterval(timeIncrement, 1000);

function vdomS(param) {
  return React$ReactFrp.S.map((function (param, param$1) {
                return false;
              }), (function (time) {
                var timeMessage = time === 1 ? "second" : "seconds";
                return "You've spent " + time + " " + timeMessage + " on this page!";
              }), timeS);
}

console.log(vdomS(undefined));

var Timer = {
  counter: counter,
  timeS: timeS,
  timeF: timeF,
  timeIncrement: timeIncrement,
  timerId: timerId,
  vdomS: vdomS
};

var counter$1 = {
  contents: 0
};

var match$1 = React$ReactFrp.S.create(undefined, counter$1.contents);

var timeF$1 = match$1[1];

function timeIncrement$1(param) {
  counter$1.contents = counter$1.contents + 1 | 0;
  return Curry._2(timeF$1, undefined, counter$1.contents);
}

var timerId$1 = setInterval(timeIncrement$1, 200);

var timeS$1 = match$1[0];

exports.timeout = timeout;
exports.notTimeout = notTimeout;
exports.p = p;
exports.makeTask = makeTask;
exports.t = t;
exports.Timer = Timer;
exports.counter = counter$1;
exports.timeS = timeS$1;
exports.timeF = timeF$1;
exports.timeIncrement = timeIncrement$1;
exports.timerId = timerId$1;
/* p Not a pure module */
