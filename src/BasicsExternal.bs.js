// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function ofList(l) {
  var current = {
    contents: l
  };
  return function (param) {
    var match = current.contents;
    if (match) {
      current.contents = match.tl;
      return Caml_option.some(match.hd);
    }
    
  };
}

function toList(g) {
  var toListRec = function (_acc) {
    while(true) {
      var acc = _acc;
      var x = Curry._1(g, undefined);
      if (x === undefined) {
        return acc;
      }
      _acc = {
        hd: Caml_option.valFromOption(x),
        tl: acc
      };
      continue ;
    };
  };
  return List.rev(toListRec(/* [] */0));
}

function length(g) {
  var _len = 0;
  while(true) {
    var len = _len;
    var match = Curry._1(g, undefined);
    if (match === undefined) {
      return len;
    }
    _len = len + 1 | 0;
    continue ;
  };
}

function map(f, in_) {
  return function (param) {
    var x = Curry._1(in_, undefined);
    if (x !== undefined) {
      return Caml_option.some(Curry._1(f, Caml_option.valFromOption(x)));
    }
    
  };
}

function filter(f, in_) {
  var out = function (_param) {
    while(true) {
      var x = Curry._1(in_, undefined);
      if (x === undefined) {
        return ;
      }
      var x$1 = Caml_option.valFromOption(x);
      if (Curry._1(f, x$1)) {
        return Caml_option.some(x$1);
      }
      _param = undefined;
      continue ;
    };
  };
  return out;
}

function iter(f, g) {
  var _param;
  while(true) {
    var x = Curry._1(g, undefined);
    if (x === undefined) {
      return ;
    }
    Curry._1(f, Caml_option.valFromOption(x));
    _param = undefined;
    continue ;
  };
}

exports.ofList = ofList;
exports.toList = toList;
exports.length = length;
exports.map = map;
exports.filter = filter;
exports.iter = iter;
/* No side effect */
