// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List  = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function ofList(l) {
  var current = [l];
  return (function () {
      var match = current[0];
      if (match) {
        current[0] = match[1];
        return /* Some */[match[0]];
      } else {
        return /* None */0;
      }
    });
}

function toList(g) {
  var toListRec = function (_acc) {
    while(true) {
      var acc = _acc;
      var match = Curry._1(g, /* () */0);
      if (match) {
        _acc = /* :: */[
          match[0],
          acc
        ];
        continue ;
        
      } else {
        return acc;
      }
    };
  };
  return List.rev(toListRec(/* [] */0));
}

function length(g) {
  var _len = 0;
  while(true) {
    var len = _len;
    var match = Curry._1(g, /* () */0);
    if (match) {
      _len = len + 1 | 0;
      continue ;
      
    } else {
      return len;
    }
  };
}

function map(f, in_) {
  return (function () {
      var match = Curry._1(in_, /* () */0);
      if (match) {
        return /* Some */[Curry._1(f, match[0])];
      } else {
        return /* None */0;
      }
    });
}

function filter(f, in_) {
  var out = function (_param) {
    while(true) {
      var match = Curry._1(in_, /* () */0);
      if (match) {
        var x = match[0];
        if (Curry._1(f, x)) {
          return /* Some */[x];
        } else {
          _param = /* () */0;
          continue ;
          
        }
      } else {
        return /* None */0;
      }
    };
  };
  return out;
}

function iter(f, g) {
  var _param = /* () */0;
  while(true) {
    var match = Curry._1(g, /* () */0);
    if (match) {
      Curry._1(f, match[0]);
      _param = /* () */0;
      continue ;
      
    } else {
      return /* () */0;
    }
  };
}

exports.ofList = ofList;
exports.toList = toList;
exports.length = length;
exports.map    = map;
exports.filter = filter;
exports.iter   = iter;
/* No side effect */
