// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Random = require("bs-platform/lib/js/random.js");
var $$String = require("bs-platform/lib/js/string.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Iter$ReasonmlDemoIterators = require("../src/lib/iter/Iter.bs.js");
var Sexpr$ReasonmlDemoIterators = require("./sexpr.bs.js");

function pp_list(sepOpt, pp_item, formatter, l) {
  var sep = sepOpt !== undefined ? sepOpt : ", ";
  return Iter$ReasonmlDemoIterators.pp_seq(sep, pp_item, formatter, (function (param) {
                return Iter$ReasonmlDemoIterators.of_list(l, param);
              }));
}

var compare = Caml_obj.caml_compare;

var ISet = $$Set.Make({
      compare: compare
    });

var compare$1 = Caml_obj.caml_compare;

var OrderedString = {
  compare: compare$1
};

var SMap = Iter$ReasonmlDemoIterators.$$Map.Make(OrderedString);

var partial_arg = {
  hd: [
    "1",
    1
  ],
  tl: {
    hd: [
      "2",
      2
    ],
    tl: {
      hd: [
        "3",
        3
      ],
      tl: {
        hd: [
          "answer",
          42
        ],
        tl: /* [] */0
      }
    }
  }
};

var my_map = Curry._1(SMap.of_seq, (function (param) {
        return Iter$ReasonmlDemoIterators.of_list(partial_arg, param);
      }));

var sexpr = "(foo bar (bazz quux hello 42) world (zoo foo bar (1 2 (3 4))))";

function random_term(param) {
  var num = {
    contents: 0
  };
  var build = function (depth) {
    if (depth > 4 || num.contents > 10) {
      return {
              TAG: /* Const */1,
              _0: random_const(undefined)
            };
    }
    var match = Random.$$int(6);
    switch (match) {
      case 0 :
          if (depth > 0) {
            return {
                    TAG: /* Var */2,
                    _0: Random.$$int(depth)
                  };
          } else {
            return {
                    TAG: /* Const */1,
                    _0: random_const(undefined)
                  };
          }
      case 1 :
          num.contents = num.contents + 1 | 0;
          return {
                  TAG: /* Lambda */0,
                  _0: build(depth + 1 | 0)
                };
      case 2 :
          return {
                  TAG: /* Const */1,
                  _0: random_const(undefined)
                };
      default:
        num.contents = num.contents + 1 | 0;
        return {
                TAG: /* Apply */3,
                _0: build(depth),
                _1: build(depth)
              };
    }
  };
  var random_const = function (param) {
    return Caml_array.get([
                "a",
                "b",
                "c",
                "f",
                "g",
                "h"
              ], Random.$$int(6));
  };
  return build(0);
}

function sexpr_of_term(t) {
  return Iter$ReasonmlDemoIterators.from_iter(function (param) {
              switch (t.TAG | 0) {
                case /* Lambda */0 :
                    return Sexpr$ReasonmlDemoIterators.output_seq("lambda", sexpr_of_term(t._0), param);
                case /* Const */1 :
                    return Sexpr$ReasonmlDemoIterators.output_str("const", t._0, param);
                case /* Var */2 :
                    return Sexpr$ReasonmlDemoIterators.output_str("var", String(t._0), param);
                case /* Apply */3 :
                    var partial_arg = sexpr_of_term(t._1);
                    var partial_arg$1 = sexpr_of_term(t._0);
                    return Sexpr$ReasonmlDemoIterators.output_seq("apply", (function (param) {
                                  return Iter$ReasonmlDemoIterators.append(partial_arg$1, partial_arg, param);
                                }), param);
                
              }
            });
}

function p_term(param) {
  return Sexpr$ReasonmlDemoIterators.$great$great$eq(Sexpr$ReasonmlDemoIterators.$great$great(Sexpr$ReasonmlDemoIterators.left, Sexpr$ReasonmlDemoIterators.$caret$pipe$pipe([
                      "lambda",
                      p_lambda
                    ], Sexpr$ReasonmlDemoIterators.$caret$pipe$pipe([
                          "var",
                          p_var
                        ], Sexpr$ReasonmlDemoIterators.$caret$pipe$pipe([
                              "const",
                              p_const
                            ], Sexpr$ReasonmlDemoIterators.$caret$pipe$pipe([
                                  "apply",
                                  p_apply
                                ], Sexpr$ReasonmlDemoIterators.fail("bad term")))))), (function (x) {
                return Sexpr$ReasonmlDemoIterators.$great$great(Sexpr$ReasonmlDemoIterators.right, Sexpr$ReasonmlDemoIterators.$$return(x));
              }));
}

function p_apply(param) {
  return Sexpr$ReasonmlDemoIterators.$great$great$eq(p_term(undefined), (function (x) {
                return Sexpr$ReasonmlDemoIterators.$great$great$eq(p_term(undefined), (function (y) {
                              return Sexpr$ReasonmlDemoIterators.$$return({
                                          TAG: /* Apply */3,
                                          _0: x,
                                          _1: y
                                        });
                            }));
              }));
}

function p_var(param) {
  return Sexpr$ReasonmlDemoIterators.$great$great$eq(Sexpr$ReasonmlDemoIterators.p_int, (function (i) {
                return Sexpr$ReasonmlDemoIterators.$$return({
                            TAG: /* Var */2,
                            _0: i
                          });
              }));
}

function p_const(param) {
  return Sexpr$ReasonmlDemoIterators.$great$great$eq(Sexpr$ReasonmlDemoIterators.p_str, (function (s) {
                return Sexpr$ReasonmlDemoIterators.$$return({
                            TAG: /* Const */1,
                            _0: s
                          });
              }));
}

function p_lambda(param) {
  return Sexpr$ReasonmlDemoIterators.$great$great$eq(p_term(undefined), (function (t) {
                return Sexpr$ReasonmlDemoIterators.$$return({
                            TAG: /* Lambda */0,
                            _0: t
                          });
              }));
}

var term_parser = p_term(undefined);

function term_of_sexp(seq) {
  return Sexpr$ReasonmlDemoIterators.parse(term_parser, seq);
}

function test_term(param) {
  var t = random_term(undefined);
  Curry._2(Format.printf(/* Format */{
            _0: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* String_literal */11,
                _0: "random term: ",
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Close_box */0,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Flush_newline */4,
                      _1: /* End_of_format */0
                    }
                  }
                }
              }
            },
            _1: "@[<h>random term: %a@]@."
          }), Sexpr$ReasonmlDemoIterators.pp_tokens, sexpr_of_term(t));
  var tokens = sexpr_of_term(t);
  var t$prime = Sexpr$ReasonmlDemoIterators.parse(term_parser, tokens);
  Curry._2(Format.printf(/* Format */{
            _0: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* String_literal */11,
                _0: "parsed: ",
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Close_box */0,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Flush_newline */4,
                      _1: /* End_of_format */0
                    }
                  }
                }
              }
            },
            _1: "@[<h>parsed: %a@]@."
          }), Sexpr$ReasonmlDemoIterators.pp_tokens, sexpr_of_term(t$prime));
  
}

var l = {
  hd: 0,
  tl: {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: {
          hd: 4,
          tl: {
            hd: 5,
            tl: {
              hd: 6,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

var l$prime = Iter$ReasonmlDemoIterators.to_list(function (param) {
      return Iter$ReasonmlDemoIterators.filter((function (x) {
                    return x % 2 === 0;
                  }), (function (param) {
                    return Iter$ReasonmlDemoIterators.of_list(l, param);
                  }), param);
    });

var l$prime$prime = Iter$ReasonmlDemoIterators.to_list(function (param) {
      return Iter$ReasonmlDemoIterators.take(3, (function (param) {
                    return Iter$ReasonmlDemoIterators.drop(1, (function (param) {
                                  return Iter$ReasonmlDemoIterators.of_list(l, param);
                                }), param);
                  }), param);
    });

var h = Hashtbl.create(undefined, 3);

for(var i = 0; i <= 5; ++i){
  Hashtbl.add(h, i, Math.imul(i, i));
}

var l2 = Iter$ReasonmlDemoIterators.to_list(function (param) {
      return Iter$ReasonmlDemoIterators.map((function (param) {
                    return String(param[0]) + (" -> " + String(param[1]));
                  }), (function (param) {
                    return Iter$ReasonmlDemoIterators.of_hashtbl(h, param);
                  }), param);
    });

var l3 = Iter$ReasonmlDemoIterators.to_list(Iter$ReasonmlDemoIterators.rev(function (param) {
          return Iter$ReasonmlDemoIterators.int_range(0, 42, param);
        }));

var set = List.fold_left((function (set, x) {
        return Curry._2(ISet.add, x, set);
      }), ISet.empty, {
      hd: 4,
      tl: {
        hd: 3,
        tl: {
          hd: 100,
          tl: {
            hd: 42,
            tl: /* [] */0
          }
        }
      }
    });

var l4 = Iter$ReasonmlDemoIterators.to_list(Iter$ReasonmlDemoIterators.of_set(ISet, set));

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "l=",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "l=@[<h>[%a]@]@."
        }), (function (param, param$1) {
        return pp_list(undefined, Format.pp_print_int, param, param$1);
      }), l);

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "l'=",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "l'=@[<h>[%a]@]@."
        }), (function (param, param$1) {
        return pp_list(undefined, Format.pp_print_int, param, param$1);
      }), l$prime);

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "l''=",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "l''=@[<h>[%a]@]@."
        }), (function (param, param$1) {
        return pp_list(undefined, Format.pp_print_int, param, param$1);
      }), l$prime$prime);

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "l2=",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "l2=@[<h>[%a]@]@."
        }), (function (param, param$1) {
        return pp_list(undefined, Format.pp_print_string, param, param$1);
      }), l2);

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "l3=",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "l3=@[<h>[%a]@]@."
        }), (function (param, param$1) {
        return pp_list(undefined, Format.pp_print_int, param, param$1);
      }), l3);

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "s={",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Alpha */15,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Close_box */0,
                  _1: {
                    TAG: /* Char_literal */12,
                    _0: /* "}" */125,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Flush_newline */4,
                      _1: /* End_of_format */0
                    }
                  }
                }
              }
            }
          },
          _1: "s={@[<h>%a@]}@."
        }), (function (param, param$1) {
        return Iter$ReasonmlDemoIterators.pp_seq(undefined, Format.pp_print_int, param, param$1);
      }), Iter$ReasonmlDemoIterators.of_set(ISet, set));

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "l4=",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "l4=@[<h>[%a]@]@."
        }), (function (param, param$1) {
        return pp_list(undefined, Format.pp_print_int, param, param$1);
      }), l4);

var partial_arg$1 = Iter$ReasonmlDemoIterators.to_array(function (param) {
      return Iter$ReasonmlDemoIterators.append((function (param) {
                    return Iter$ReasonmlDemoIterators.take(5, (function (param) {
                                  return Iter$ReasonmlDemoIterators.of_list(l3, param);
                                }), param);
                  }), (function (param) {
                    return Iter$ReasonmlDemoIterators.of_list(l4, param);
                  }), param);
    });

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "l3[:5]+l4=",
            _1: {
              TAG: /* Formatting_gen */18,
              _0: {
                TAG: /* Open_box */1,
                _0: /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "<h>",
                    _1: /* End_of_format */0
                  },
                  _1: "<h>"
                }
              },
              _1: {
                TAG: /* Char_literal */12,
                _0: /* "[" */91,
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Char_literal */12,
                    _0: /* "]" */93,
                    _1: {
                      TAG: /* Formatting_lit */17,
                      _0: /* Close_box */0,
                      _1: {
                        TAG: /* Formatting_lit */17,
                        _0: /* Flush_newline */4,
                        _1: /* End_of_format */0
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "l3[:5]+l4=@[<h>[%a]@]@."
        }), (function (param, param$1) {
        return Iter$ReasonmlDemoIterators.pp_seq(undefined, Format.pp_print_int, param, param$1);
      }), (function (param) {
        return Iter$ReasonmlDemoIterators.of_array(partial_arg$1, param);
      }));

function seq(param) {
  return Iter$ReasonmlDemoIterators.int_range(0, 100000, param);
}

var seq$prime = Iter$ReasonmlDemoIterators.persistent(seq);

var stream = Iter$ReasonmlDemoIterators.to_stream(seq$prime);

Curry._3(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "test length [0..100000]: persistent1 ",
            _1: {
              TAG: /* Int */4,
              _0: /* Int_d */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* String_literal */11,
                _0: ", stream ",
                _1: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: {
                    TAG: /* String_literal */11,
                    _0: ", persistent2 ",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: /* End_of_format */0
                    }
                  }
                }
              }
            }
          },
          _1: "test length [0..100000]: persistent1 %d, stream %d, persistent2 %d"
        }), Iter$ReasonmlDemoIterators.length(seq$prime), Iter$ReasonmlDemoIterators.length(function (param) {
          return Iter$ReasonmlDemoIterators.of_stream(stream, param);
        }), Iter$ReasonmlDemoIterators.length(seq$prime));

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* Formatting_gen */18,
            _0: {
              TAG: /* Open_box */1,
              _0: /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "<h>",
                  _1: /* End_of_format */0
                },
                _1: "<h>"
              }
            },
            _1: {
              TAG: /* String_literal */11,
              _0: "map: ",
              _1: {
                TAG: /* Alpha */15,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Close_box */0,
                  _1: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Flush_newline */4,
                    _1: /* End_of_format */0
                  }
                }
              }
            }
          },
          _1: "@[<h>map: %a@]@."
        }), (function (param, param$1) {
        return Iter$ReasonmlDemoIterators.pp_seq(undefined, (function (formatter, param) {
                      return Curry._2(Format.fprintf(formatter, /* Format */{
                                      _0: {
                                        TAG: /* Char_literal */12,
                                        _0: /* "\"" */34,
                                        _1: {
                                          TAG: /* String */2,
                                          _0: /* No_padding */0,
                                          _1: {
                                            TAG: /* String_literal */11,
                                            _0: "\" -> ",
                                            _1: {
                                              TAG: /* Int */4,
                                              _0: /* Int_d */0,
                                              _1: /* No_padding */0,
                                              _2: /* No_precision */0,
                                              _3: /* End_of_format */0
                                            }
                                          }
                                        }
                                      },
                                      _1: "\"%s\" -> %d"
                                    }), param[0], param[1]);
                    }), param, param$1);
      }), Curry._1(SMap.to_seq, my_map));

var MyMapSeq = Iter$ReasonmlDemoIterators.$$Map.Adapt($$Map.Make(OrderedString));

var partial_arg$2 = {
  hd: [
    "1",
    1
  ],
  tl: {
    hd: [
      "2",
      2
    ],
    tl: {
      hd: [
        "3",
        3
      ],
      tl: {
        hd: [
          "answer",
          42
        ],
        tl: /* [] */0
      }
    }
  }
};

var my_map$prime = Curry._1(MyMapSeq.of_seq, (function (param) {
        return Iter$ReasonmlDemoIterators.of_list(partial_arg$2, param);
      }));

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* Formatting_gen */18,
            _0: {
              TAG: /* Open_box */1,
              _0: /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "<h>",
                  _1: /* End_of_format */0
                },
                _1: "<h>"
              }
            },
            _1: {
              TAG: /* String_literal */11,
              _0: "map: ",
              _1: {
                TAG: /* Alpha */15,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Close_box */0,
                  _1: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Flush_newline */4,
                    _1: /* End_of_format */0
                  }
                }
              }
            }
          },
          _1: "@[<h>map: %a@]@."
        }), (function (param, param$1) {
        return Iter$ReasonmlDemoIterators.pp_seq(undefined, (function (formatter, param) {
                      return Curry._2(Format.fprintf(formatter, /* Format */{
                                      _0: {
                                        TAG: /* Char_literal */12,
                                        _0: /* "\"" */34,
                                        _1: {
                                          TAG: /* String */2,
                                          _0: /* No_padding */0,
                                          _1: {
                                            TAG: /* String_literal */11,
                                            _0: "\" -> ",
                                            _1: {
                                              TAG: /* Int */4,
                                              _0: /* Int_d */0,
                                              _1: /* No_padding */0,
                                              _2: /* No_precision */0,
                                              _3: /* End_of_format */0
                                            }
                                          }
                                        }
                                      },
                                      _1: "\"%s\" -> %d"
                                    }), param[0], param[1]);
                    }), param, param$1);
      }), Curry._1(MyMapSeq.to_seq, my_map$prime));

var sum = Iter$ReasonmlDemoIterators.fold((function (prim, prim$1) {
        return prim + prim$1 | 0;
      }), 0, (function (param) {
        return Iter$ReasonmlDemoIterators.take(1000000, (function (param) {
                      return Iter$ReasonmlDemoIterators.repeat(1, param);
                    }), param);
      }));

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* Int */4,
            _0: /* Int_d */0,
            _1: /* No_padding */0,
            _2: /* No_precision */0,
            _3: {
              TAG: /* String_literal */11,
              _0: "x1 = ",
              _1: {
                TAG: /* Int */4,
                _0: /* Int_d */0,
                _1: /* No_padding */0,
                _2: /* No_precision */0,
                _3: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Flush_newline */4,
                  _1: /* End_of_format */0
                }
              }
            }
          },
          _1: "%dx1 = %d@."
        }), 1000000, sum);

if (1000000 !== sum) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_sexpr.re",
          191,
          2
        ],
        Error: new Error()
      };
}

var s = Sexpr$ReasonmlDemoIterators.of_seq(Sexpr$ReasonmlDemoIterators.lex(function (param) {
          return Iter$ReasonmlDemoIterators.of_str(sexpr, param);
        }));

var partial_arg$3 = Sexpr$ReasonmlDemoIterators.traverse(s);

var s$1 = Sexpr$ReasonmlDemoIterators.of_seq(function (param) {
      return Iter$ReasonmlDemoIterators.map((function (tok) {
                    if (typeof tok === "string" || tok.NAME !== "Atom") {
                      return tok;
                    } else {
                      return {
                              NAME: "Atom",
                              VAL: $$String.capitalize_ascii(tok.VAL)
                            };
                    }
                  }), partial_arg$3, param);
    });

var partial_arg$4 = false;

Curry._3(Format.printf(/* Format */{
          _0: {
            TAG: /* Formatting_gen */18,
            _0: {
              TAG: /* Open_box */1,
              _0: /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "<hov2>",
                  _1: /* End_of_format */0
                },
                _1: "<hov2>"
              }
            },
            _1: {
              TAG: /* String_literal */11,
              _0: "transform ",
              _1: {
                TAG: /* Formatting_gen */18,
                _0: {
                  TAG: /* Open_box */1,
                  _0: /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "<h>",
                      _1: /* End_of_format */0
                    },
                    _1: "<h>"
                  }
                },
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Close_box */0,
                    _1: {
                      TAG: /* String_literal */11,
                      _0: " into ",
                      _1: {
                        TAG: /* Formatting_gen */18,
                        _0: {
                          TAG: /* Open_box */1,
                          _0: /* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "<h>",
                              _1: /* End_of_format */0
                            },
                            _1: "<h>"
                          }
                        },
                        _1: {
                          TAG: /* Alpha */15,
                          _0: {
                            TAG: /* Formatting_lit */17,
                            _0: /* Close_box */0,
                            _1: {
                              TAG: /* Formatting_lit */17,
                              _0: /* Close_box */0,
                              _1: {
                                TAG: /* Formatting_lit */17,
                                _0: /* Flush_newline */4,
                                _1: /* End_of_format */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "@[<hov2>transform @[<h>%s@] into @[<h>%a@]@]@."
        }), sexpr, (function (param, param$1) {
        return Sexpr$ReasonmlDemoIterators.pp_sexpr(partial_arg$4, param, param$1);
      }), s$1);

var partial_arg$5 = Sexpr$ReasonmlDemoIterators.traverse(s$1);

function partial_arg$6(param) {
  return Iter$ReasonmlDemoIterators.repeat(partial_arg$5, param);
}

function partial_arg$7(param) {
  return Iter$ReasonmlDemoIterators.take(10, partial_arg$6, param);
}

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* Formatting_gen */18,
            _0: {
              TAG: /* Open_box */1,
              _0: /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "<hv2>",
                  _1: /* End_of_format */0
                },
                _1: "<hv2>"
              }
            },
            _1: {
              TAG: /* String_literal */11,
              _0: " cycle:",
              _1: {
                TAG: /* Alpha */15,
                _0: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Close_box */0,
                  _1: {
                    TAG: /* Formatting_lit */17,
                    _0: /* Flush_newline */4,
                    _1: /* End_of_format */0
                  }
                }
              }
            }
          },
          _1: "@[<hv2> cycle:%a@]@."
        }), Sexpr$ReasonmlDemoIterators.pp_tokens, (function (param) {
        return Iter$ReasonmlDemoIterators.concat(partial_arg$7, param);
      }));

for(var i$1 = 0; i$1 <= 20; ++i$1){
  Curry._1(Format.printf(/* Format */{
            _0: {
              TAG: /* Int */4,
              _0: /* Int_d */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* String_literal */11,
                _0: "-th term test",
                _1: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Flush_newline */4,
                  _1: /* End_of_format */0
                }
              }
            },
            _1: "%d-th term test@."
          }), i$1);
  test_term(undefined);
}

var iset = ISet;

exports.pp_list = pp_list;
exports.ISet = ISet;
exports.iset = iset;
exports.OrderedString = OrderedString;
exports.SMap = SMap;
exports.my_map = my_map;
exports.sexpr = sexpr;
exports.random_term = random_term;
exports.sexpr_of_term = sexpr_of_term;
exports.term_parser = term_parser;
exports.term_of_sexp = term_of_sexp;
exports.test_term = test_term;
/* ISet Not a pure module */
